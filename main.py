# https://github.com/CodeAcademy-Online/python-new-material-level2/wiki/Mongo-DB---lesson-1:-Introduction
# https://www.mongodb.com/docs/mongodb-shell/reference/data-types/cd
# https://www.mongodb.com/docs/v3.4/reference/mongo-shell/

# Mongo DB lesson 1: Introduction

# Introduction
# MongoDB, often referred to as "Mongo," is a popular open-source NoSQL (non-relational) database management system. 
# MongoDB is designed to store and manage large volumes of structured and unstructured data, providing high scalability, 
# flexibility, and performance.

# MongoDB's document-oriented data model allows for the storage of data in a flexible, JSON-like format called BSON 
# (Binary JSON). This schema-less approach enables developers to work with dynamic and evolving data structures without 
# the need for strict predefined schemas.

# Some key features of MongoDB include:

# Scalability: MongoDB is built to scale horizontally across multiple servers or clusters, allowing for increased storage 
# capacity and high availability.

# High Performance: MongoDB utilizes memory-mapped storage and supports indexing, making it efficient for read and write operations.

# Flexibility: With its dynamic schema, MongoDB accommodates evolving data structures and allows for easy modifications to the database schema.

# Replication and High Availability: MongoDB provides built-in replication and automatic failover capabilities, ensuring data 
# redundancy and minimizing downtime.

# Querying and Aggregation: MongoDB supports a rich set of query capabilities, including flexible filtering, sorting, and 
# aggregation, enabling powerful data retrieval and analysis.

# Geospatial Capabilities: MongoDB includes geospatial indexing and querying features, allowing for location-based queries and 
# spatial data processing.

# MongoDB offers a comprehensive set of drivers and APIs for various programming languages, making it widely accessible and 
# compatible with different application stacks. Additionally, MongoDB provides a robust ecosystem with tools like MongoDB Compass 
# (a graphical user interface), MongoDB Atlas (a fully managed database service), and extensive documentation and community support.

# MongoDB's flexibility and scalability make it suitable for a wide range of applications, including content management systems, 
# real-time analytics, social networks, and e-commerce platforms, among others.

# Document-oriented data model
# MongoDB's document-oriented data model is a key feature that sets it apart from traditional relational databases. In this model, 
# data is organized and stored in flexible, self-descriptive documents, typically in the BSON (Binary JSON) format. Let's explore 
# this data model with examples:

# Consider a simple blog application where users can create and manage blog posts. In a relational database, you might represent 
# this using tables, such as "users" and "posts," with relationships defined through foreign keys. In MongoDB's document-oriented 
# data model, you would represent each blog post as a document, containing all the relevant information within a single structure.

# Example 1: Blog Post Document

# {
#   "_id": ObjectId("615214a8a987654321012345"),
#   "title": "Introduction to MongoDB",
#   "content": "MongoDB is a powerful NoSQL database...",
#   "author": {
#     "name": "John Doe",
#     "email": "johndoe@example.com"
#   },
#   "tags": ["MongoDB", "NoSQL", "Database"],
#   "createdAt": ISODate("2021-09-29T10:30:00Z"),
#   "updatedAt": ISODate("2021-09-30T15:45:00Z")
# }
# In this example, the blog post is represented as a single document with various fields:

# _id: A unique identifier for the document, automatically generated by MongoDB.
# title: The title of the blog post.
# content: The content of the blog post.
# author: An embedded document representing the author's details, including their name and email.
# tags: An array field containing tags associated with the blog post.
# createdAt and updatedAt: Timestamps indicating when the document was created and last updated.
# The document structure is flexible, allowing additional fields to be added as needed. Each document is self-contained, 
# meaning all the relevant data for a specific entity (in this case, a blog post) is stored within that document.

# Database structure
# MongoDB is a popular NoSQL (non-relational) database system designed to store and manage large volumes of data in a flexible and 
# scalable manner. It differs from traditional relational databases by using a document-oriented data model, where data is stored in 
# flexible, JSON-like documents.

# In MongoDB, the basic unit of data is a document, which is a set of key-value pairs. Documents are stored in collections, which 
# are similar to tables in relational databases. However, unlike tables, collections in MongoDB do not enforce a fixed schema, 
# allowing for dynamic and evolving data structures within the same collection.

# The document structure in MongoDB is hierarchical, with nested fields and arrays. This allows for representing complex data 
# structures in a natural way. Each document is uniquely identified by an "_id" field, which can be automatically generated or 
# assigned by the application.

# MongoDB supports a rich query language that allows for retrieving, updating, and deleting documents based on various criteria. 
# The queries can use both simple equality checks and powerful operators to match documents based on specific fields or values.

# In addition to the basic CRUD (Create, Read, Update, Delete) operations, MongoDB provides advanced features like indexes for 
# efficient data retrieval, aggregation pipelines for complex data processing, and geospatial queries for location-based data.

# MongoDB also offers built-in support for horizontal scaling through sharding, allowing you to distribute data across multiple 
# servers or clusters for improved performance and scalability.

# Overall, MongoDB's flexible document structure, scalability, and powerful querying capabilities make it a popular choice for 
# building modern applications that deal with large and diverse data sets.

########################################################################
# docker ps                                 -   conteiners
# docker ps -a                              -   visi konteijeriai
#  docker start test-mongo
# docker stop konteinerio pavadinimas       -   sustabdo konteinerio sukimasi
# docker images
# docker system prune -a                    -   viska istrina
# docker exec -it test-mongo bash           -    ieiti i konteineri (test-mongo)
# root@af9c06228a3b:/# mongosh              -   prisijungem prie db
# docker inspect affe50040290               -  issitraukiame networkingosetingus(reikia hostIP ir HostPort)    

# "NetworkSettings": {
#             "Bridge": "",
#             "SandboxID": "9a2c22050d20fb3d63f09728f202f3a724fde14e1e4baea3317eea52ee12568b",
#             "HairpinMode": false,
#             "LinkLocalIPv6Address": "",
#             "LinkLocalIPv6PrefixLen": 0,
#             "Ports": {
#                 "27017/tcp": [
#                     {
#                         "HostIp": "0.0.0.0", ####################################
#                         "HostPort": "27017" ####################################

# Connect with Connection String ->Connection:
# mongodb://<docker-ip>:27017                   -   suvedam -> mongodb://0.0.0.0:27017 
# docker rename example-mongo test-mongo        -   pervadiname konteineri

# python -m venv .venv
# $ source .venv/Scripts/activate
# (.venv)
# $ pip install pymongo

###################################################################################

# https://github.com/CodeAcademy-Online/python-new-material-level2/wiki/Mongo-DB---lesson-2:-PyMongo-and-CRUD-operations
# Mongo DB lesson 2: PyMongo and CRUD operations
# Mindaugeliseth edited this page on May 15, 2023 Â· 8 revisions
# Introduction
# PyMongo is the official Python driver for MongoDB, which allows Python developers to interact with MongoDB databases from their Python applications. It provides a high-level, user-friendly interface to connect to a MongoDB server, perform database operations, and manipulate data.

# Installation
# PyMongo can be installed using Python's package manager, pip, by running the command :

# pip install pymongo
# This will install the necessary dependencies and make PyMongo available for use in your Python environment.

# Connecting to database
# Connecting to MongoDB: PyMongo allows you to establish a connection to a MongoDB server using the MongoClient class. You need to provide the connection details such as the server's hostname and port number. Once connected, you can access databases and collections within the server:

# from pymongo import MongoClient
# from pymongo.database import Database

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'

#     # Connect to MongoDB
#     db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)
#     print(f"Connected to MongoDB: {mongodb_host}:{mongodb_port}, Database: {database_name}")
# In the above code:

# We import the necessary modules: MongoClient from pymongo for establishing the connection and Database from pymongo.database for type hinting the returned database object.

# The connect_to_mongodb function takes in the host, port, and database name as parameters. It establishes a connection to the MongoDB server using MongoClient and returns the specified database using dot notation.

# In the example usage section, we provide the connection details: mongodb_host, mongodb_port, and database_name.

# We call the connect_to_mongodb function with the provided connection details, and it returns the database object.

# Finally, we print a confirmation message displaying the connection details and the database name.

# Accessing Databases and Collections
# With PyMongo, you can access databases and collections using dot notation. You can retrieve a specific database using client.database_name and a collection using client.database_name.collection_name. PyMongo also provides methods for listing available databases and collections:

# from pymongo import MongoClient
# from pymongo.database import Database
# from pymongo.collection import Collection
# from typing import List

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# def get_database_collection(database: Database, collection_name: str) -> Collection:
#     collection = database[collection_name]
#     return collection

# def list_databases(client: MongoClient) -> List[str]:
#     return client.list_database_names()

# def list_collections(database: Database) -> List[str]:
#     return database.list_collection_names()

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'
#     collection_name = 'mycollection'

#     # Connect to MongoDB
#     client = MongoClient(mongodb_host, mongodb_port)
#     db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

#     # Retrieve a specific collection
#     collection = get_database_collection(db, collection_name)
#     print(f"Retrieved collection: {collection_name}")

#     # List all databases
#     databases = list_databases(client)
#     print("List of databases:")
#     for db_name in databases:
#         print(db_name)

#     # List collections in the connected database
#     collections = list_collections(db)
#     print("Collections in the connected database:")
#     for collection_name in collections:
#         print(collection_name)
# In the above code:

# We import the necessary modules: MongoClient from pymongo for establishing the connection, Database from pymongo.database for type hinting the database object, Collection from pymongo.collection for type hinting the collection object, and List from typing for type hinting the returned lists.

# The connect_to_mongodb function remains the same as before, which establishes the connection and returns the specified database.

# The get_database_collection function takes in the database object and the collection name as parameters. It retrieves and returns the specified collection using dot notation.

# The list_databases function takes the MongoClient object as a parameter and returns a list of all the database names using list_database_names().

# The list_collections function takes the Database object as a parameter and returns a list of all the collection names in the connected database using list_collection_names().

# In the example usage section, we provide the connection details: mongodb_host, mongodb_port, database_name, and collection_name.

# We first establish a connection to the MongoDB server using MongoClient and store it in the client variable.

# Then we connect to the specified database using the connect_to_mongodb function.

# We retrieve a specific collection using the get_database_collection function and store it in the collection variable.

# We use the list_databases function to retrieve all the database names and print them.

# We use the list_collections function to retrieve all the collection names in the connected database and print them.

# CRUD operations
# CRUD operations stand for Create, Read, Update, and Delete. These operations represent the basic actions performed on data in a database. Here's an explanation of each operation and an example of how to perform them using PyMongo, incorporating type annotations and good coding practices:

# Create(Insert) Operation:
# The create operation is used to add new data to a collection in the database:

# from pymongo import MongoClient
# from pymongo.database import Database
# from pymongo.collection import Collection
# from typing import Dict

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# def insert_document(collection: Collection, document: Dict) -> str:
#     result = collection.insert_one(document)
#     return str(result.inserted_id)

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'
#     collection_name = 'mycollection'

#     # Connect to MongoDB
#     db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

#     # Retrieve a specific collection
#     collection = db[collection_name]

#     # Create (Insert) Operation
#     document = {
#         "name": "John Doe",
#         "age": 30,
#         "email": "johndoe@example.com"
#     }
#     inserted_id = insert_document(collection, document)
#     print(f"Inserted document with ID: {inserted_id}")
# In the above code:

# The insert_document function takes a collection and a document (represented as a dictionary) as parameters. It inserts the document into the collection using insert_one() and returns the ID of the inserted document.
# The example usage section establishes a connection to the MongoDB server and retrieves the desired collection.
# A sample document is created, containing fields such as name, age, and email.
# The insert_document function is called to perform the create operation by inserting the document into the collection.
# The ID of the inserted document is printed.
# Read (Query) Operation:
# The read operation is used to retrieve data from a collection in the database:

# from pymongo import MongoClient
# from pymongo.database import Database
# from pymongo.collection import Collection
# from typing import Dict

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# def find_documents(collection: Collection, query: Dict) -> List[Dict]:
#     documents = collection.find(query)
#     return list(documents)

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'
#     collection_name = 'mycollection'

#     # Connect to MongoDB
#     db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

#     # Retrieve a specific collection
#     collection = db[collection_name]

#     # Read (Query) Operation
#     query = {"name": "John Doe"}
#     results = find_documents(collection, query)
#     print("Matching documents:")
#     for result in results:
#         print(result)
# In the above code:

# The find_documents function takes a collection and a query (represented as a dictionary) as parameters. It performs a query using find() and returns the matching documents as a list of dictionaries.
# The example usage section establishes a connection to the MongoDB server and retrieves the desired collection.
# A query dictionary is created to find documents
# Update Operation:
# The update operation is used to modify existing data in a collection:

# from pymongo import MongoClient
# from pymongo.database import Database
# from pymongo.collection import Collection
# from typing import Dict

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# def update_document(collection: Collection, query: Dict, update: Dict) -> int:
#     result = collection.update_many(query, {"$set": update})
#     return result.modified_count

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'
#     collection_name = 'mycollection'

#     # Connect to MongoDB
#     db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

#     # Retrieve a specific collection
#     collection = db[collection_name]

#     # Update Operation
#     query = {"name": "John Doe"}
#     update = {"age": 35}
#     modified_count = update_document(collection, query, update)
#     print(f"Modified {modified_count} documents")
# In the above code:

# The update_document function takes a collection, a query (represented as a dictionary), and an update (represented as a dictionary) as parameters. It performs an update operation using update_many() with the $set operator to modify matching documents and returns the count of modified documents.
# The example usage section establishes a connection to the MongoDB server and retrieves the desired collection.
# A query dictionary is created to find documents with the name "John Doe".
# An update dictionary is created to set the age field to 35 for matching documents.
# The update_document function is called to perform the update operation, and the count of modified documents is printed.
# Delete Operation:
# The delete operation is used to remove data from a collection:

# from pymongo import MongoClient
# from pymongo.database import Database
# from pymongo.collection import Collection
# from typing import Dict

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# def delete_documents(collection: Collection, query: Dict) -> int:
#     result = collection.delete_many(query)
#     return result.deleted_count

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'
#     collection_name = 'mycollection'

#     # Connect to MongoDB
#     db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

#     # Retrieve a specific collection
#     collection = db[collection_name]

#     # Delete Operation
#     query = {"name": "John Doe"}
#     deleted_count = delete_documents(collection, query)
#     print(f"Deleted {deleted_count} documents")
# In the above code:

# The delete_documents function takes a collection and a query (represented as a dictionary) as parameters. It performs a delete operation using delete_many() to remove matching documents and returns the count of deleted documents.
# The example usage section establishes a connection to the MongoDB server and retrieves the desired collection.
# A query dictionary is created to find documents with the name "John Doe".
# The delete_documents function is called to perform the delete operation, and the count of deleted documents is printed.
#########################################################

# from pymongo import MongoClient
# from pymongo.database import Database
# from pymongo.collection import Collection
# from typing import List

# def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
#     client = MongoClient(host, port)
#     database = client[db_name]
#     return database

# def get_database_collection(database: Database, collection_name: str) -> Collection:
#     collection = database[collection_name]
#     return collection

# def list_databases(client: MongoClient) -> List[str]:
#     return client.list_database_names()

# def list_collections(database: Database) -> List[str]:
#     return database.list_collection_names()

# # Example usage
# if __name__ == "__main__":
#     # Connection details
#     mongodb_host = 'localhost'
#     mongodb_port = 27017
#     database_name = 'mydatabase'
#     collection_name = 'mycollection'

#     # Connect to MongoDB
#     client = MongoClient(mongodb_host, mongodb_port)
#     # db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

#     # # Retrieve a specific collection
#     # collection = get_database_collection(db, collection_name)
#     # print(f"Retrieved collection: {collection_name}")

#     # List all databases
#     databases = list_databases(client)
#     print("List of databases:")
#     print(f"Data base type: {type(databases)}, {databases}")
#     for db_name in databases:
#         print(db_name)

#     # List collections in the connected database
#     # collections = list_collections(db)
#     # print("Collections in the connected database:")
#     # for collection_name in collections:
#     #     print(collection_name)
        
##############################################################################
        
from pymongo import MongoClient
from pymongo.database import Database
from pymongo.collection import Collection
from typing import Dict

def connect_to_mongodb(host: str, port: int, db_name: str) -> Database:
    client = MongoClient(host, port)
    database = client[db_name]
    return database

def insert_document(collection: Collection, document: Dict) -> str:
    result = collection.insert_one(document)
    return str(result.inserted_id)

# Example usage
if __name__ == "__main__":
    # Connection details
    mongodb_host = 'localhost'
    mongodb_port = 27017
    database_name = 'mydatabase'
    collection_name = 'mycollection'

    # Connect to MongoDB
    db = connect_to_mongodb(mongodb_host, mongodb_port, database_name)

    # Retrieve a specific collection
    collection = db[collection_name]

    # Create (Insert) Operation
    document = {
        "name": "Vyga",
        "age": 30,
        "email": "johndoe@example.com",
        "title": "Mrs"
    }
    inserted_id = insert_document(collection, document)
    print(f"Inserted document with ID: {inserted_id}")







